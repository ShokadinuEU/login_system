{"version":3,"sources":["components/left-side/LeftSide.js","components/right-side/RightSide.js","components/container/Container.js","App.js","serviceWorker.js","index.js"],"names":["LeftSide","className","href","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","marginBottom","padding","rightSideButton","boxShadow","textTransform","fontSize","border","lineHeight","backgroundColor","borderRadius","color","margin","fontWeight","outline","fontFamily","join","borderColor","cursor","alternativeSignIn","marginTop","left","classes","src","alt","TextField","required","id","label","defaultValue","variant","type","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAGe,SAASA,IACtB,OACE,yBAAKC,UAAU,mBACb,2DACA,gEACA,0DAC8B,uBAAGC,KAAK,UAAR,W,oBCJ9BC,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,QAAS,OACTC,SAAU,QAEZC,UAAW,CACTC,WAAYL,EAAMM,QAAQ,GAC1BC,YAAaP,EAAMM,QAAQ,GAC3BE,MAAO,MACPC,aAAc,OACd,UAAW,CACTC,QAAS,aAGbC,gBAAiB,CACfC,UAAW,OACXC,cAAe,YACfC,SAAU,GACVJ,QAAS,WACTK,OAAQ,YACRC,WAAY,IACZC,gBAAiB,UACjBC,aAAc,OACdC,MAAO,OACPjB,QAAS,OACTkB,OAAQ,aACRC,WAAY,MACZC,QAAS,OACTC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,KACP,UAAW,CACTP,gBAAiB,WACjBQ,YAAa,UACbb,UAAW,OACXc,OAAQ,YAGZC,kBAAmB,CACjBb,SAAU,GACVJ,QAAS,WACTM,WAAY,IACZC,gBAAiB,OACjBC,aAAc,MACdC,MAAO,YACPjB,QAAS,OACTkB,OAAQ,aACRC,WAAY,MACZC,QAAS,OACTV,UAAW,uBACXG,OAAQ,IACRa,UAAW,QACX,UAAW,CACTT,MAAO,OACPO,OAAQ,UACRd,UAAW,wBAEb,QAAS,CACPJ,MAAO,GACPqB,KAAM,GAER,OAAQ,CACNnB,QAAS,eAKA,SAASf,IACtB,IAAMmC,EAAUhC,IAChB,OACE,yBAAKF,UAAU,oBACb,6BACE,yBAAKmC,IAAI,4BAA4BC,IAAI,WAE3C,8BACE,wCACA,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,YACNC,aAAa,IACbzC,UAAWkC,EAAQ1B,UACnBkC,QAAQ,aAEV,kBAACL,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,SACNC,aAAa,IACbzC,UAAWkC,EAAQ1B,UACnBkC,QAAQ,aAEV,kBAACL,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,WACNC,aAAa,IACbzC,UAAWkC,EAAQ1B,UACnBkC,QAAQ,WACRC,KAAK,aAEP,4BAAQA,KAAK,SAAS3C,UAAWkC,EAAQnB,iBAAzC,aAIF,6BACE,4BAAQf,UAAWkC,EAAQH,mBACzB,yBAAKI,IAAI,kCAAkCC,IAAI,UAC/C,qDCrHK,SAASQ,IACtB,OACE,yBAAK5C,UAAU,kBACb,kBAACD,EAAD,MACA,kBAAC,EAAD,OCES8C,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC4C,EAAD,QCMcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa7151d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./left-side.scss\";\r\n\r\nexport default function LeftSide() {\r\n  return (\r\n    <div className=\"left-side__main\">\r\n      <h1>Redefing mobile advertising</h1>\r\n      <p>Please use this form to register.</p>\r\n      <p>\r\n        If you are a member, please <a href=\"/login\">login</a>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"./right-side.scss\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: \"90%\",\r\n    marginBottom: \"11px\",\r\n    \"& input\": {\r\n      padding: \"9px 12px\"\r\n    }\r\n  },\r\n  rightSideButton: {\r\n    boxShadow: \"none\",\r\n    textTransform: \"uppercase\",\r\n    fontSize: 16,\r\n    padding: \"6px 12px\",\r\n    border: \"1px solid\",\r\n    lineHeight: 1.5,\r\n    backgroundColor: \"#9c27b0\",\r\n    borderRadius: \"25px\",\r\n    color: \"#fff\",\r\n    display: \"flex\",\r\n    margin: \"0.5em auto\",\r\n    fontWeight: \"600\",\r\n    outline: \"none\",\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"'\r\n    ].join(\",\"),\r\n    \"&:hover\": {\r\n      backgroundColor: \"##1976d2\",\r\n      borderColor: \"#0062cc\",\r\n      boxShadow: \"none\",\r\n      cursor: \"pointer\"\r\n    }\r\n  },\r\n  alternativeSignIn: {\r\n    fontSize: 15,\r\n    padding: \"6px 12px\",\r\n    lineHeight: 1.5,\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: \"4px\",\r\n    color: \"#3a3a3a99\",\r\n    display: \"flex\",\r\n    margin: \"0.5em auto\",\r\n    fontWeight: \"600\",\r\n    outline: \"none\",\r\n    boxShadow: \"1px 2px 2px 1px #ccc\",\r\n    border: \"0\",\r\n    marginTop: \"1.4em\",\r\n    \"&:hover\": {\r\n      color: \"#000\",\r\n      cursor: \"pointer\",\r\n      boxShadow: \"1px 2px 2px 1px #000\"\r\n    },\r\n    \"& img\": {\r\n      width: 18,\r\n      left: 0\r\n    },\r\n    \"& p \": {\r\n      padding: \"0 2em\"\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function LeftSide() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"right-side__main\">\r\n      <div>\r\n        <img src=\"./assets/images/brand.png\" alt=\"brand\" />\r\n      </div>\r\n      <form>\r\n        <h3>Register</h3>\r\n        <TextField\r\n          required\r\n          id=\"outlined-required\"\r\n          label=\"Full Name\"\r\n          defaultValue=\" \"\r\n          className={classes.textField}\r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          required\r\n          id=\"outlined-required\"\r\n          label=\"E-mail\"\r\n          defaultValue=\" \"\r\n          className={classes.textField}\r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          required\r\n          id=\"outlined-required\"\r\n          label=\"Password\"\r\n          defaultValue=\" \"\r\n          className={classes.textField}\r\n          variant=\"outlined\"\r\n          type=\"password\"\r\n        />\r\n        <button type=\"submit\" className={classes.rightSideButton}>\r\n          Register\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <button className={classes.alternativeSignIn}>\r\n          <img src=\"./assets/images/google-icon.png\" alt=\"brand\" />\r\n          <p>Sign in with Google</p>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./container.scss\";\r\nimport LeftSide from \"../left-side/LeftSide\";\r\nimport RightSide from \"../right-side/RightSide\";\r\n\r\nexport default function Container() {\r\n  return (\r\n    <div className=\"container-main\">\r\n      <LeftSide />\r\n      <RightSide />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Container from \"./components/container/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}